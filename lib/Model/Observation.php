<?php
/**
 * Observation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Mediator  SATUSEHAT
 *
 * Spesifikasi API ini merupakan contoh untuk menggunakan **Mediator Interoperabilitas SATUSEHAT** yang secara khusus ditujukan untuk mempercepat dan memudahkan proses interoperabilitas data Rekam Medis Elektronik (RME) antara sistem informasi di Fasilitas Kesehatan (Rumah Sakit, Puskesmas, Klinik, Laboratorium, dll) dengan Platform SATUSEHAT.  Mediator Interoperabilitas SATUSEHAT menyediakan format custom yang disederhanakan dari format HL7 FHIR sebagai perantara antara sistem RME dengan SATUSEHAT beserta sistem informasi kesehatan yang ada ditingkat nasional.
 *
 * OpenAPI spec version: 1.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.59
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mediator\SatuSehat\Lib\Client\Model;

use Mediator\SatuSehat\Lib\Client\ObjectSerializer;

/**
 * Observation Class Doc Comment
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Observation extends MediatorResourceBasic
{
    public static $DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Observation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type_observation' => 'string',
        'issued' => '\DateTime',
        'value' => 'string',
        'value_unit' => 'string',
        'value_detail' => 'string',
        'effective_date_time' => '\DateTime',
        'performer' => 'string',
        'service_request' => 'string',
        'specimen' => 'string',
        'diagnostic_report' => 'string',
        'notes_detail' => 'string',
        'interpretation_code' => 'string',
        'interpretation_text' => 'string',
        'sitb_tcm_code' => 'string',
        'component' => '\Mediator\SatuSehat\Lib\Client\Model\ObservationComponent[]',
        'derived_from' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type_observation' => null,
        'issued' => 'date-time',
        'value' => null,
        'value_unit' => null,
        'value_detail' => null,
        'effective_date_time' => 'date-time',
        'performer' => null,
        'service_request' => null,
        'specimen' => null,
        'diagnostic_report' => null,
        'notes_detail' => null,
        'interpretation_code' => null,
        'interpretation_text' => null,
        'sitb_tcm_code' => null,
        'component' => null,
        'derived_from' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_observation' => 'type_observation',
        'issued' => 'issued',
        'value' => 'value',
        'value_unit' => 'value_unit',
        'value_detail' => 'value_detail',
        'effective_date_time' => 'effectiveDateTime',
        'performer' => 'performer',
        'service_request' => 'service_request',
        'specimen' => 'specimen',
        'diagnostic_report' => 'diagnostic_report',
        'notes_detail' => 'notes_detail',
        'interpretation_code' => 'interpretation_code',
        'interpretation_text' => 'interpretation_text',
        'sitb_tcm_code' => 'sitb_tcm_code',
        'component' => 'component',
        'derived_from' => 'derivedFrom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_observation' => 'setTypeObservation',
        'issued' => 'setIssued',
        'value' => 'setValue',
        'value_unit' => 'setValueUnit',
        'value_detail' => 'setValueDetail',
        'effective_date_time' => 'setEffectiveDateTime',
        'performer' => 'setPerformer',
        'service_request' => 'setServiceRequest',
        'specimen' => 'setSpecimen',
        'diagnostic_report' => 'setDiagnosticReport',
        'notes_detail' => 'setNotesDetail',
        'interpretation_code' => 'setInterpretationCode',
        'interpretation_text' => 'setInterpretationText',
        'sitb_tcm_code' => 'setSitbTcmCode',
        'component' => 'setComponent',
        'derived_from' => 'setDerivedFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_observation' => 'getTypeObservation',
        'issued' => 'getIssued',
        'value' => 'getValue',
        'value_unit' => 'getValueUnit',
        'value_detail' => 'getValueDetail',
        'effective_date_time' => 'getEffectiveDateTime',
        'performer' => 'getPerformer',
        'service_request' => 'getServiceRequest',
        'specimen' => 'getSpecimen',
        'diagnostic_report' => 'getDiagnosticReport',
        'notes_detail' => 'getNotesDetail',
        'interpretation_code' => 'getInterpretationCode',
        'interpretation_text' => 'getInterpretationText',
        'sitb_tcm_code' => 'getSitbTcmCode',
        'component' => 'getComponent',
        'derived_from' => 'getDerivedFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['type_observation'] = isset($data['type_observation']) ? $data['type_observation'] : null;
        $this->container['issued'] = isset($data['issued']) ? $data['issued'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['value_unit'] = isset($data['value_unit']) ? $data['value_unit'] : null;
        $this->container['value_detail'] = isset($data['value_detail']) ? $data['value_detail'] : null;
        $this->container['effective_date_time'] = isset($data['effective_date_time']) ? $data['effective_date_time'] : null;
        $this->container['performer'] = isset($data['performer']) ? $data['performer'] : null;
        $this->container['service_request'] = isset($data['service_request']) ? $data['service_request'] : null;
        $this->container['specimen'] = isset($data['specimen']) ? $data['specimen'] : null;
        $this->container['diagnostic_report'] = isset($data['diagnostic_report']) ? $data['diagnostic_report'] : null;
        $this->container['notes_detail'] = isset($data['notes_detail']) ? $data['notes_detail'] : null;
        $this->container['interpretation_code'] = isset($data['interpretation_code']) ? $data['interpretation_code'] : null;
        $this->container['interpretation_text'] = isset($data['interpretation_text']) ? $data['interpretation_text'] : null;
        $this->container['sitb_tcm_code'] = isset($data['sitb_tcm_code']) ? $data['sitb_tcm_code'] : null;
        $this->container['component'] = isset($data['component']) ? $data['component'] : null;
        $this->container['derived_from'] = isset($data['derived_from']) ? $data['derived_from'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_observation
     *
     * @return string
     */
    public function getTypeObservation()
    {
        return $this->container['type_observation'];
    }

    /**
     * Sets type_observation
     *
     * @param string $type_observation type_observation
     *
     * @return $this
     */
    public function setTypeObservation($type_observation)
    {
        $this->container['type_observation'] = $type_observation;

        return $this;
    }

    /**
     * Gets issued
     *
     * @return \DateTime
     */
    public function getIssued()
    {
        return $this->container['issued'];
    }

    /**
     * Sets issued
     *
     * @param \DateTime $issued issued
     *
     * @return $this
     */
    public function setIssued($issued)
    {
        $this->container['issued'] = $issued;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets value_unit
     *
     * @return string
     */
    public function getValueUnit()
    {
        return $this->container['value_unit'];
    }

    /**
     * Sets value_unit
     *
     * @param string $value_unit value_unit
     *
     * @return $this
     */
    public function setValueUnit($value_unit)
    {
        $this->container['value_unit'] = $value_unit;

        return $this;
    }

    /**
     * Gets value_detail
     *
     * @return string
     */
    public function getValueDetail()
    {
        return $this->container['value_detail'];
    }

    /**
     * Sets value_detail
     *
     * @param string $value_detail value_detail
     *
     * @return $this
     */
    public function setValueDetail($value_detail)
    {
        $this->container['value_detail'] = $value_detail;

        return $this;
    }

    /**
     * Gets effective_date_time
     *
     * @return \DateTime
     */
    public function getEffectiveDateTime()
    {
        return $this->container['effective_date_time'];
    }

    /**
     * Sets effective_date_time
     *
     * @param \DateTime $effective_date_time effective_date_time
     *
     * @return $this
     */
    public function setEffectiveDateTime($effective_date_time)
    {
        $this->container['effective_date_time'] = $effective_date_time;

        return $this;
    }

    /**
     * Gets performer
     *
     * @return string
     */
    public function getPerformer()
    {
        return $this->container['performer'];
    }

    /**
     * Sets performer
     *
     * @param string $performer performer
     *
     * @return $this
     */
    public function setPerformer($performer)
    {
        $this->container['performer'] = $performer;

        return $this;
    }

    /**
     * Gets service_request
     *
     * @return string
     */
    public function getServiceRequest()
    {
        return $this->container['service_request'];
    }

    /**
     * Sets service_request
     *
     * @param string $service_request service_request
     *
     * @return $this
     */
    public function setServiceRequest($service_request)
    {
        $this->container['service_request'] = $service_request;

        return $this;
    }

    /**
     * Gets specimen
     *
     * @return string
     */
    public function getSpecimen()
    {
        return $this->container['specimen'];
    }

    /**
     * Sets specimen
     *
     * @param string $specimen specimen
     *
     * @return $this
     */
    public function setSpecimen($specimen)
    {
        $this->container['specimen'] = $specimen;

        return $this;
    }

    /**
     * Gets diagnostic_report
     *
     * @return string
     */
    public function getDiagnosticReport()
    {
        return $this->container['diagnostic_report'];
    }

    /**
     * Sets diagnostic_report
     *
     * @param string $diagnostic_report diagnostic_report
     *
     * @return $this
     */
    public function setDiagnosticReport($diagnostic_report)
    {
        $this->container['diagnostic_report'] = $diagnostic_report;

        return $this;
    }

    /**
     * Gets notes_detail
     *
     * @return string
     */
    public function getNotesDetail()
    {
        return $this->container['notes_detail'];
    }

    /**
     * Sets notes_detail
     *
     * @param string $notes_detail notes_detail
     *
     * @return $this
     */
    public function setNotesDetail($notes_detail)
    {
        $this->container['notes_detail'] = $notes_detail;

        return $this;
    }

    /**
     * Gets interpretation_code
     *
     * @return string
     */
    public function getInterpretationCode()
    {
        return $this->container['interpretation_code'];
    }

    /**
     * Sets interpretation_code
     *
     * @param string $interpretation_code interpretation_code
     *
     * @return $this
     */
    public function setInterpretationCode($interpretation_code)
    {
        $this->container['interpretation_code'] = $interpretation_code;

        return $this;
    }

    /**
     * Gets interpretation_text
     *
     * @return string
     */
    public function getInterpretationText()
    {
        return $this->container['interpretation_text'];
    }

    /**
     * Sets interpretation_text
     *
     * @param string $interpretation_text interpretation_text
     *
     * @return $this
     */
    public function setInterpretationText($interpretation_text)
    {
        $this->container['interpretation_text'] = $interpretation_text;

        return $this;
    }

    /**
     * Gets sitb_tcm_code
     *
     * @return string
     */
    public function getSitbTcmCode()
    {
        return $this->container['sitb_tcm_code'];
    }

    /**
     * Sets sitb_tcm_code
     *
     * @param string $sitb_tcm_code sitb_tcm_code
     *
     * @return $this
     */
    public function setSitbTcmCode($sitb_tcm_code)
    {
        $this->container['sitb_tcm_code'] = $sitb_tcm_code;

        return $this;
    }

    /**
     * Gets component
     *
     * @return \Mediator\SatuSehat\Lib\Client\Model\ObservationComponent[]
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param \Mediator\SatuSehat\Lib\Client\Model\ObservationComponent[] $component component
     *
     * @return $this
     */
    public function setComponent($component)
    {
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets derived_from
     *
     * @return string
     */
    public function getDerivedFrom()
    {
        return $this->container['derived_from'];
    }

    /**
     * Sets derived_from
     *
     * @param string $derived_from derived_from
     *
     * @return $this
     */
    public function setDerivedFrom($derived_from)
    {
        $this->container['derived_from'] = $derived_from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
