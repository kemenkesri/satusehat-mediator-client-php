<?php
/**
 * Medication
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Mediator  SATUSEHAT
 *
 * Spesifikasi API ini merupakan contoh untuk menggunakan **Mediator Interoperabilitas SATUSEHAT** yang secara khusus ditujukan untuk mempercepat dan memudahkan proses interoperabilitas data Rekam Medis Elektronik (RME) antara sistem informasi di Fasilitas Kesehatan (Rumah Sakit, Puskesmas, Klinik, Laboratorium, dll) dengan Platform SATUSEHAT.  Mediator Interoperabilitas SATUSEHAT menyediakan format custom yang disederhanakan dari format HL7 FHIR sebagai perantara antara sistem RME dengan SATUSEHAT beserta sistem informasi kesehatan yang ada ditingkat nasional.
 *
 * OpenAPI spec version: 1.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.59
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mediator\SatuSehat\Lib\Client\Model;

use Mediator\SatuSehat\Lib\Client\ObjectSerializer;

/**
 * Medication Class Doc Comment
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Medication extends MediatorResourceBasic
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Medication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'template' => 'string',
        'kfa_code' => 'string',
        'form_code' => 'string',
        'type' => 'string',
        'progress' => 'string',
        'status' => 'string',
        'priority' => 'string',
        'reason_code' => 'string',
        'interval' => 'int',
        'interval_unit' => 'string',
        'frequency' => 'int',
        'dosage' => 'int',
        'quantity' => 'int',
        'duration' => 'int',
        'period_start' => '\DateTime',
        'period_end' => '\DateTime',
        'drug_form' => 'string',
        'route' => 'string',
        'patient_instruction' => 'string',
        'additional_instruction' => 'string',
        'ingredient' => '\Mediator\SatuSehat\Lib\Client\Model\MedicationIngredient[]',
        'dispense_location_id' => 'string',
        'iter' => 'int',
        'batch_no' => 'string',
        'batch_exp' => '\DateTime',
        'when_prepared' => '\DateTime',
        'when_handed_over' => '\DateTime',
        'prescription_no' => 'string',
        'prescription_item_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'template' => null,
        'kfa_code' => null,
        'form_code' => null,
        'type' => null,
        'progress' => null,
        'status' => null,
        'priority' => null,
        'reason_code' => null,
        'interval' => null,
        'interval_unit' => null,
        'frequency' => null,
        'dosage' => null,
        'quantity' => null,
        'duration' => null,
        'period_start' => 'date-time',
        'period_end' => 'date-time',
        'drug_form' => null,
        'route' => null,
        'patient_instruction' => null,
        'additional_instruction' => null,
        'ingredient' => null,
        'dispense_location_id' => null,
        'iter' => null,
        'batch_no' => null,
        'batch_exp' => 'date-time',
        'when_prepared' => 'date-time',
        'when_handed_over' => 'date-time',
        'prescription_no' => null,
        'prescription_item_no' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'template' => 'template',
        'kfa_code' => 'kfa_code',
        'form_code' => 'form_code',
        'type' => 'type',
        'progress' => 'progress',
        'status' => 'status',
        'priority' => 'priority',
        'reason_code' => 'reason_code',
        'interval' => 'interval',
        'interval_unit' => 'interval_unit',
        'frequency' => 'frequency',
        'dosage' => 'dosage',
        'quantity' => 'quantity',
        'duration' => 'duration',
        'period_start' => 'period_start',
        'period_end' => 'period_end',
        'drug_form' => 'drug_form',
        'route' => 'route',
        'patient_instruction' => 'patientInstruction',
        'additional_instruction' => 'additionalInstruction',
        'ingredient' => 'ingredient',
        'dispense_location_id' => 'dispense_location_id',
        'iter' => 'iter',
        'batch_no' => 'batch_no',
        'batch_exp' => 'batch_exp',
        'when_prepared' => 'whenPrepared',
        'when_handed_over' => 'whenHandedOver',
        'prescription_no' => 'prescription_no',
        'prescription_item_no' => 'prescription_item_no'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'template' => 'setTemplate',
        'kfa_code' => 'setKfaCode',
        'form_code' => 'setFormCode',
        'type' => 'setType',
        'progress' => 'setProgress',
        'status' => 'setStatus',
        'priority' => 'setPriority',
        'reason_code' => 'setReasonCode',
        'interval' => 'setInterval',
        'interval_unit' => 'setIntervalUnit',
        'frequency' => 'setFrequency',
        'dosage' => 'setDosage',
        'quantity' => 'setQuantity',
        'duration' => 'setDuration',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'drug_form' => 'setDrugForm',
        'route' => 'setRoute',
        'patient_instruction' => 'setPatientInstruction',
        'additional_instruction' => 'setAdditionalInstruction',
        'ingredient' => 'setIngredient',
        'dispense_location_id' => 'setDispenseLocationId',
        'iter' => 'setIter',
        'batch_no' => 'setBatchNo',
        'batch_exp' => 'setBatchExp',
        'when_prepared' => 'setWhenPrepared',
        'when_handed_over' => 'setWhenHandedOver',
        'prescription_no' => 'setPrescriptionNo',
        'prescription_item_no' => 'setPrescriptionItemNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'template' => 'getTemplate',
        'kfa_code' => 'getKfaCode',
        'form_code' => 'getFormCode',
        'type' => 'getType',
        'progress' => 'getProgress',
        'status' => 'getStatus',
        'priority' => 'getPriority',
        'reason_code' => 'getReasonCode',
        'interval' => 'getInterval',
        'interval_unit' => 'getIntervalUnit',
        'frequency' => 'getFrequency',
        'dosage' => 'getDosage',
        'quantity' => 'getQuantity',
        'duration' => 'getDuration',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'drug_form' => 'getDrugForm',
        'route' => 'getRoute',
        'patient_instruction' => 'getPatientInstruction',
        'additional_instruction' => 'getAdditionalInstruction',
        'ingredient' => 'getIngredient',
        'dispense_location_id' => 'getDispenseLocationId',
        'iter' => 'getIter',
        'batch_no' => 'getBatchNo',
        'batch_exp' => 'getBatchExp',
        'when_prepared' => 'getWhenPrepared',
        'when_handed_over' => 'getWhenHandedOver',
        'prescription_no' => 'getPrescriptionNo',
        'prescription_item_no' => 'getPrescriptionItemNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const FORM_CODE_BS001 = 'BS001';
    public const FORM_CODE_BS002 = 'BS002';
    public const FORM_CODE_BS003 = 'BS003';
    public const FORM_CODE_BS004 = 'BS004';
    public const FORM_CODE_BS005 = 'BS005';
    public const FORM_CODE_BS006 = 'BS006';
    public const FORM_CODE_BS007 = 'BS007';
    public const FORM_CODE_BS008 = 'BS008';
    public const FORM_CODE_BS009 = 'BS009';
    public const FORM_CODE_BS010 = 'BS010';
    public const FORM_CODE_BS011 = 'BS011';
    public const FORM_CODE_BS012 = 'BS012';
    public const FORM_CODE_BS013 = 'BS013';
    public const FORM_CODE_BS014 = 'BS014';
    public const FORM_CODE_BS015 = 'BS015';
    public const FORM_CODE_BS016 = 'BS016';
    public const FORM_CODE_BS017 = 'BS017';
    public const FORM_CODE_BS018 = 'BS018';
    public const FORM_CODE_BS019 = 'BS019';
    public const FORM_CODE_BS020 = 'BS020';
    public const FORM_CODE_BS021 = 'BS021';
    public const FORM_CODE_BS022 = 'BS022';
    public const FORM_CODE_BS023 = 'BS023';
    public const FORM_CODE_BS024 = 'BS024';
    public const FORM_CODE_BS025 = 'BS025';
    public const FORM_CODE_BS026 = 'BS026';
    public const FORM_CODE_BS027 = 'BS027';
    public const FORM_CODE_BS028 = 'BS028';
    public const FORM_CODE_BS029 = 'BS029';
    public const FORM_CODE_BS030 = 'BS030';
    public const FORM_CODE_BS031 = 'BS031';
    public const FORM_CODE_BS032 = 'BS032';
    public const FORM_CODE_BS033 = 'BS033';
    public const FORM_CODE_BS034 = 'BS034';
    public const FORM_CODE_BS035 = 'BS035';
    public const FORM_CODE_BS036 = 'BS036';
    public const FORM_CODE_BS037 = 'BS037';
    public const FORM_CODE_BS038 = 'BS038';
    public const FORM_CODE_BS039 = 'BS039';
    public const FORM_CODE_BS040 = 'BS040';
    public const FORM_CODE_BS041 = 'BS041';
    public const FORM_CODE_BS042 = 'BS042';
    public const FORM_CODE_BS043 = 'BS043';
    public const FORM_CODE_BS044 = 'BS044';
    public const FORM_CODE_BS045 = 'BS045';
    public const FORM_CODE_BS046 = 'BS046';
    public const FORM_CODE_BS047 = 'BS047';
    public const FORM_CODE_BS048 = 'BS048';
    public const FORM_CODE_BS049 = 'BS049';
    public const FORM_CODE_BS050 = 'BS050';
    public const FORM_CODE_BS051 = 'BS051';
    public const FORM_CODE_BS052 = 'BS052';
    public const FORM_CODE_BS053 = 'BS053';
    public const FORM_CODE_BS054 = 'BS054';
    public const FORM_CODE_BS055 = 'BS055';
    public const FORM_CODE_BS056 = 'BS056';
    public const FORM_CODE_BS057 = 'BS057';
    public const FORM_CODE_BS058 = 'BS058';
    public const FORM_CODE_BS059 = 'BS059';
    public const FORM_CODE_BS060 = 'BS060';
    public const FORM_CODE_BS061 = 'BS061';
    public const FORM_CODE_BS062 = 'BS062';
    public const FORM_CODE_BS063 = 'BS063';
    public const FORM_CODE_BS064 = 'BS064';
    public const FORM_CODE_BS065 = 'BS065';
    public const FORM_CODE_BS066 = 'BS066';
    public const FORM_CODE_BS067 = 'BS067';
    public const FORM_CODE_BS068 = 'BS068';
    public const FORM_CODE_BS069 = 'BS069';
    public const FORM_CODE_BS070 = 'BS070';
    public const FORM_CODE_BS071 = 'BS071';
    public const FORM_CODE_BS072 = 'BS072';
    public const FORM_CODE_BS073 = 'BS073';
    public const FORM_CODE_BS074 = 'BS074';
    public const FORM_CODE_BS075 = 'BS075';
    public const FORM_CODE_BS076 = 'BS076';
    public const FORM_CODE_BS077 = 'BS077';
    public const FORM_CODE_BS078 = 'BS078';
    public const FORM_CODE_BS079 = 'BS079';
    public const FORM_CODE_BS080 = 'BS080';
    public const FORM_CODE_BS081 = 'BS081';
    public const FORM_CODE_BS082 = 'BS082';
    public const FORM_CODE_BS083 = 'BS083';
    public const FORM_CODE_BS084 = 'BS084';
    public const FORM_CODE_BS085 = 'BS085';
    public const FORM_CODE_BS086 = 'BS086';
    public const FORM_CODE_BS087 = 'BS087';
    public const FORM_CODE_BS088 = 'BS088';
    public const FORM_CODE_BS089 = 'BS089';
    public const FORM_CODE_BS090 = 'BS090';
    public const FORM_CODE_BS091 = 'BS091';
    public const FORM_CODE_BS092 = 'BS092';
    public const FORM_CODE_BS093 = 'BS093';
    public const FORM_CODE_BS094 = 'BS094';
    public const FORM_CODE_BS095 = 'BS095';
    public const FORM_CODE_BS096 = 'BS096';
    public const TYPE_NC = 'NC';
    public const TYPE_SD = 'SD';
    public const TYPE_EP = 'EP';
    public const PROGRESS_REQUEST = 'request';
    public const PROGRESS_DISPENSE = 'dispense';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_ON_HOLD = 'on-hold';
    public const STATUS_CANCELLED = 'cancelled';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_ENTERED_IN_ERROR = 'entered-in-error';
    public const STATUS_STOPPED = 'stopped';
    public const STATUS_DRAFT = 'draft';
    public const STATUS_UNKNOWN = 'unknown';
    public const PRIORITY_ROUTINE = 'routine';
    public const PRIORITY_URGENT = 'urgent';
    public const PRIORITY_ASAP = 'asap';
    public const PRIORITY_STAT = 'stat';
    public const DRUG_FORM_APPFUL = 'APPFUL';
    public const DRUG_FORM_DROP = 'DROP';
    public const DRUG_FORM_NDROP = 'NDROP';
    public const DRUG_FORM_OPDROP = 'OPDROP';
    public const DRUG_FORM_ORDROP = 'ORDROP';
    public const DRUG_FORM_OTDROP = 'OTDROP';
    public const DRUG_FORM_PUFF = 'PUFF';
    public const DRUG_FORM_SCOOP = 'SCOOP';
    public const DRUG_FORM_SPRY = 'SPRY';
    public const DRUG_FORM_GASINHL = 'GASINHL';
    public const DRUG_FORM_AER = 'AER';
    public const DRUG_FORM_BAINHL = 'BAINHL';
    public const DRUG_FORM_INHLSOL = 'INHLSOL';
    public const DRUG_FORM_MDINHL = 'MDINHL';
    public const DRUG_FORM_NASSPRY = 'NASSPRY';
    public const DRUG_FORM_DERMSPRY = 'DERMSPRY';
    public const DRUG_FORM_FOAM = 'FOAM';
    public const DRUG_FORM_FOAMAPL = 'FOAMAPL';
    public const DRUG_FORM_RECFORM = 'RECFORM';
    public const DRUG_FORM_VAGFOAM = 'VAGFOAM';
    public const DRUG_FORM_RECSPRY = 'RECSPRY';
    public const DRUG_FORM_VAGSPRY = 'VAGSPRY';
    public const DRUG_FORM_INHL = 'INHL';
    public const DRUG_FORM_BAINHLPWD = 'BAINHLPWD';
    public const DRUG_FORM_INHLPWD = 'INHLPWD';
    public const DRUG_FORM_MDINHLPWD = 'MDINHLPWD';
    public const DRUG_FORM_NASINHL = 'NASINHL';
    public const DRUG_FORM_ORINHL = 'ORINHL';
    public const DRUG_FORM_PWDSPRY = 'PWDSPRY';
    public const DRUG_FORM_SPRYADAPT = 'SPRYADAPT';
    public const DRUG_FORM_LIQCLN = 'LIQCLN';
    public const DRUG_FORM_LIQSOAP = 'LIQSOAP';
    public const DRUG_FORM_SHMP = 'SHMP';
    public const DRUG_FORM_OIL = 'OIL';
    public const DRUG_FORM_TOPOIL = 'TOPOIL';
    public const DRUG_FORM_SOL = 'SOL';
    public const DRUG_FORM_IPSOL = 'IPSOL';
    public const DRUG_FORM_IRSOL = 'IRSOL';
    public const DRUG_FORM_IVSOL = 'IVSOL';
    public const DRUG_FORM_ORALSOL = 'ORALSOL';
    public const DRUG_FORM_RECSOL = 'RECSOL';
    public const DRUG_FORM_TOPSOL = 'TOPSOL';
    public const DRUG_FORM_CRM = 'CRM';
    public const DRUG_FORM_NASCRM = 'NASCRM';
    public const DRUG_FORM_OPCRM = 'OPCRM';
    public const DRUG_FORM_ORCRM = 'ORCRM';
    public const DRUG_FORM_OTCRM = 'OTCRM';
    public const DRUG_FORM_RECCRM = 'RECCRM';
    public const DRUG_FORM_TOPCRM = 'TOPCRM';
    public const DRUG_FORM_VAGCRM = 'VAGCRM';
    public const DRUG_FORM_LTN = 'LTN';
    public const DRUG_FORM_TOPLTN = 'TOPLTN';
    public const DRUG_FORM_OINT = 'OINT';
    public const DRUG_FORM_NASOINT = 'NASOINT';
    public const DRUG_FORM_OINTAPL = 'OINTAPL';
    public const DRUG_FORM_OPOINT = 'OPOINT';
    public const DRUG_FORM_OTOINT = 'OTOINT';
    public const DRUG_FORM_RECOINT = 'RECOINT';
    public const DRUG_FORM_TOPOINT = 'TOPOINT';
    public const DRUG_FORM_VAGOINT = 'VAGOINT';
    public const DRUG_FORM_GEL = 'GEL';
    public const DRUG_FORM_GELAPL = 'GELAPL';
    public const DRUG_FORM_NASGEL = 'NASGEL';
    public const DRUG_FORM_OPGEL = 'OPGEL';
    public const DRUG_FORM_OTGEL = 'OTGEL';
    public const DRUG_FORM_TOPGEL = 'TOPGEL';
    public const DRUG_FORM_URETHGEL = 'URETHGEL';
    public const DRUG_FORM_VAGGEL = 'VAGGEL';
    public const DRUG_FORM_PASTE = 'PASTE';
    public const DRUG_FORM_PUD = 'PUD';
    public const DRUG_FORM_TPASTE = 'TPASTE';
    public const DRUG_FORM_SUSP = 'SUSP';
    public const DRUG_FORM_ITSUSP = 'ITSUSP';
    public const DRUG_FORM_OPSUSP = 'OPSUSP';
    public const DRUG_FORM_ORSUSP = 'ORSUSP';
    public const DRUG_FORM_OTSUSP = 'OTSUSP';
    public const DRUG_FORM_RECSUSP = 'RECSUSP';
    public const DRUG_FORM_BAR = 'BAR';
    public const DRUG_FORM_BARSOAP = 'BARSOAP';
    public const DRUG_FORM_CHEWBAR = 'CHEWBAR';
    public const DRUG_FORM_BEAD = 'BEAD';
    public const DRUG_FORM_CAKE = 'CAKE';
    public const DRUG_FORM_CEMENT = 'CEMENT';
    public const DRUG_FORM_CRYS = 'CRYS';
    public const DRUG_FORM_DISK = 'DISK';
    public const DRUG_FORM_FLAKE = 'FLAKE';
    public const DRUG_FORM_GRAN = 'GRAN';
    public const DRUG_FORM_GUM = 'GUM';
    public const DRUG_FORM_PAD = 'PAD';
    public const DRUG_FORM_MEDPAD = 'MEDPAD';
    public const DRUG_FORM_PATCH = 'PATCH';
    public const DRUG_FORM_TPATCH = 'TPATCH';
    public const DRUG_FORM_PELLET = 'PELLET';
    public const DRUG_FORM_PILL = 'PILL';
    public const DRUG_FORM_CAP = 'CAP';
    public const DRUG_FORM_TAB = 'TAB';
    public const DRUG_FORM_POWD = 'POWD';
    public const DRUG_FORM_TOPPWD = 'TOPPWD';
    public const DRUG_FORM_SUPP = 'SUPP';
    public const DRUG_FORM_RECSUPP = 'RECSUPP';
    public const DRUG_FORM_URETHSUPP = 'URETHSUPP';
    public const DRUG_FORM_VAGSUPP = 'VAGSUPP';
    public const DRUG_FORM_SWAB = 'SWAB';
    public const DRUG_FORM_MEDSWAB = 'MEDSWAB';
    public const DRUG_FORM_WAFER = 'WAFER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormCodeAllowableValues()
    {
        return [
            self::FORM_CODE_BS001,
            self::FORM_CODE_BS002,
            self::FORM_CODE_BS003,
            self::FORM_CODE_BS004,
            self::FORM_CODE_BS005,
            self::FORM_CODE_BS006,
            self::FORM_CODE_BS007,
            self::FORM_CODE_BS008,
            self::FORM_CODE_BS009,
            self::FORM_CODE_BS010,
            self::FORM_CODE_BS011,
            self::FORM_CODE_BS012,
            self::FORM_CODE_BS013,
            self::FORM_CODE_BS014,
            self::FORM_CODE_BS015,
            self::FORM_CODE_BS016,
            self::FORM_CODE_BS017,
            self::FORM_CODE_BS018,
            self::FORM_CODE_BS019,
            self::FORM_CODE_BS020,
            self::FORM_CODE_BS021,
            self::FORM_CODE_BS022,
            self::FORM_CODE_BS023,
            self::FORM_CODE_BS024,
            self::FORM_CODE_BS025,
            self::FORM_CODE_BS026,
            self::FORM_CODE_BS027,
            self::FORM_CODE_BS028,
            self::FORM_CODE_BS029,
            self::FORM_CODE_BS030,
            self::FORM_CODE_BS031,
            self::FORM_CODE_BS032,
            self::FORM_CODE_BS033,
            self::FORM_CODE_BS034,
            self::FORM_CODE_BS035,
            self::FORM_CODE_BS036,
            self::FORM_CODE_BS037,
            self::FORM_CODE_BS038,
            self::FORM_CODE_BS039,
            self::FORM_CODE_BS040,
            self::FORM_CODE_BS041,
            self::FORM_CODE_BS042,
            self::FORM_CODE_BS043,
            self::FORM_CODE_BS044,
            self::FORM_CODE_BS045,
            self::FORM_CODE_BS046,
            self::FORM_CODE_BS047,
            self::FORM_CODE_BS048,
            self::FORM_CODE_BS049,
            self::FORM_CODE_BS050,
            self::FORM_CODE_BS051,
            self::FORM_CODE_BS052,
            self::FORM_CODE_BS053,
            self::FORM_CODE_BS054,
            self::FORM_CODE_BS055,
            self::FORM_CODE_BS056,
            self::FORM_CODE_BS057,
            self::FORM_CODE_BS058,
            self::FORM_CODE_BS059,
            self::FORM_CODE_BS060,
            self::FORM_CODE_BS061,
            self::FORM_CODE_BS062,
            self::FORM_CODE_BS063,
            self::FORM_CODE_BS064,
            self::FORM_CODE_BS065,
            self::FORM_CODE_BS066,
            self::FORM_CODE_BS067,
            self::FORM_CODE_BS068,
            self::FORM_CODE_BS069,
            self::FORM_CODE_BS070,
            self::FORM_CODE_BS071,
            self::FORM_CODE_BS072,
            self::FORM_CODE_BS073,
            self::FORM_CODE_BS074,
            self::FORM_CODE_BS075,
            self::FORM_CODE_BS076,
            self::FORM_CODE_BS077,
            self::FORM_CODE_BS078,
            self::FORM_CODE_BS079,
            self::FORM_CODE_BS080,
            self::FORM_CODE_BS081,
            self::FORM_CODE_BS082,
            self::FORM_CODE_BS083,
            self::FORM_CODE_BS084,
            self::FORM_CODE_BS085,
            self::FORM_CODE_BS086,
            self::FORM_CODE_BS087,
            self::FORM_CODE_BS088,
            self::FORM_CODE_BS089,
            self::FORM_CODE_BS090,
            self::FORM_CODE_BS091,
            self::FORM_CODE_BS092,
            self::FORM_CODE_BS093,
            self::FORM_CODE_BS094,
            self::FORM_CODE_BS095,
            self::FORM_CODE_BS096,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NC,
            self::TYPE_SD,
            self::TYPE_EP,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProgressAllowableValues()
    {
        return [
            self::PROGRESS_REQUEST,
            self::PROGRESS_DISPENSE,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_ON_HOLD,
            self::STATUS_CANCELLED,
            self::STATUS_COMPLETED,
            self::STATUS_ENTERED_IN_ERROR,
            self::STATUS_STOPPED,
            self::STATUS_DRAFT,
            self::STATUS_UNKNOWN,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_ROUTINE,
            self::PRIORITY_URGENT,
            self::PRIORITY_ASAP,
            self::PRIORITY_STAT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDrugFormAllowableValues()
    {
        return [
            self::DRUG_FORM_APPFUL,
            self::DRUG_FORM_DROP,
            self::DRUG_FORM_NDROP,
            self::DRUG_FORM_OPDROP,
            self::DRUG_FORM_ORDROP,
            self::DRUG_FORM_OTDROP,
            self::DRUG_FORM_PUFF,
            self::DRUG_FORM_SCOOP,
            self::DRUG_FORM_SPRY,
            self::DRUG_FORM_GASINHL,
            self::DRUG_FORM_AER,
            self::DRUG_FORM_BAINHL,
            self::DRUG_FORM_INHLSOL,
            self::DRUG_FORM_MDINHL,
            self::DRUG_FORM_NASSPRY,
            self::DRUG_FORM_DERMSPRY,
            self::DRUG_FORM_FOAM,
            self::DRUG_FORM_FOAMAPL,
            self::DRUG_FORM_RECFORM,
            self::DRUG_FORM_VAGFOAM,
            self::DRUG_FORM_RECSPRY,
            self::DRUG_FORM_VAGSPRY,
            self::DRUG_FORM_INHL,
            self::DRUG_FORM_BAINHLPWD,
            self::DRUG_FORM_INHLPWD,
            self::DRUG_FORM_MDINHLPWD,
            self::DRUG_FORM_NASINHL,
            self::DRUG_FORM_ORINHL,
            self::DRUG_FORM_PWDSPRY,
            self::DRUG_FORM_SPRYADAPT,
            self::DRUG_FORM_LIQCLN,
            self::DRUG_FORM_LIQSOAP,
            self::DRUG_FORM_SHMP,
            self::DRUG_FORM_OIL,
            self::DRUG_FORM_TOPOIL,
            self::DRUG_FORM_SOL,
            self::DRUG_FORM_IPSOL,
            self::DRUG_FORM_IRSOL,
            self::DRUG_FORM_IVSOL,
            self::DRUG_FORM_ORALSOL,
            self::DRUG_FORM_RECSOL,
            self::DRUG_FORM_TOPSOL,
            self::DRUG_FORM_CRM,
            self::DRUG_FORM_NASCRM,
            self::DRUG_FORM_OPCRM,
            self::DRUG_FORM_ORCRM,
            self::DRUG_FORM_OTCRM,
            self::DRUG_FORM_RECCRM,
            self::DRUG_FORM_TOPCRM,
            self::DRUG_FORM_VAGCRM,
            self::DRUG_FORM_LTN,
            self::DRUG_FORM_TOPLTN,
            self::DRUG_FORM_OINT,
            self::DRUG_FORM_NASOINT,
            self::DRUG_FORM_OINTAPL,
            self::DRUG_FORM_OPOINT,
            self::DRUG_FORM_OTOINT,
            self::DRUG_FORM_RECOINT,
            self::DRUG_FORM_TOPOINT,
            self::DRUG_FORM_VAGOINT,
            self::DRUG_FORM_GEL,
            self::DRUG_FORM_GELAPL,
            self::DRUG_FORM_NASGEL,
            self::DRUG_FORM_OPGEL,
            self::DRUG_FORM_OTGEL,
            self::DRUG_FORM_TOPGEL,
            self::DRUG_FORM_URETHGEL,
            self::DRUG_FORM_VAGGEL,
            self::DRUG_FORM_PASTE,
            self::DRUG_FORM_PUD,
            self::DRUG_FORM_TPASTE,
            self::DRUG_FORM_SUSP,
            self::DRUG_FORM_ITSUSP,
            self::DRUG_FORM_OPSUSP,
            self::DRUG_FORM_ORSUSP,
            self::DRUG_FORM_OTSUSP,
            self::DRUG_FORM_RECSUSP,
            self::DRUG_FORM_BAR,
            self::DRUG_FORM_BARSOAP,
            self::DRUG_FORM_CHEWBAR,
            self::DRUG_FORM_BEAD,
            self::DRUG_FORM_CAKE,
            self::DRUG_FORM_CEMENT,
            self::DRUG_FORM_CRYS,
            self::DRUG_FORM_DISK,
            self::DRUG_FORM_FLAKE,
            self::DRUG_FORM_GRAN,
            self::DRUG_FORM_GUM,
            self::DRUG_FORM_PAD,
            self::DRUG_FORM_MEDPAD,
            self::DRUG_FORM_PATCH,
            self::DRUG_FORM_TPATCH,
            self::DRUG_FORM_PELLET,
            self::DRUG_FORM_PILL,
            self::DRUG_FORM_CAP,
            self::DRUG_FORM_TAB,
            self::DRUG_FORM_POWD,
            self::DRUG_FORM_TOPPWD,
            self::DRUG_FORM_SUPP,
            self::DRUG_FORM_RECSUPP,
            self::DRUG_FORM_URETHSUPP,
            self::DRUG_FORM_VAGSUPP,
            self::DRUG_FORM_SWAB,
            self::DRUG_FORM_MEDSWAB,
            self::DRUG_FORM_WAFER,
        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['kfa_code'] = isset($data['kfa_code']) ? $data['kfa_code'] : null;
        $this->container['form_code'] = isset($data['form_code']) ? $data['form_code'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['interval_unit'] = isset($data['interval_unit']) ? $data['interval_unit'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['dosage'] = isset($data['dosage']) ? $data['dosage'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['drug_form'] = isset($data['drug_form']) ? $data['drug_form'] : null;
        $this->container['route'] = isset($data['route']) ? $data['route'] : null;
        $this->container['patient_instruction'] = isset($data['patient_instruction']) ? $data['patient_instruction'] : null;
        $this->container['additional_instruction'] = isset($data['additional_instruction']) ? $data['additional_instruction'] : null;
        $this->container['ingredient'] = isset($data['ingredient']) ? $data['ingredient'] : null;
        $this->container['dispense_location_id'] = isset($data['dispense_location_id']) ? $data['dispense_location_id'] : null;
        $this->container['iter'] = isset($data['iter']) ? $data['iter'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['batch_exp'] = isset($data['batch_exp']) ? $data['batch_exp'] : null;
        $this->container['when_prepared'] = isset($data['when_prepared']) ? $data['when_prepared'] : null;
        $this->container['when_handed_over'] = isset($data['when_handed_over']) ? $data['when_handed_over'] : null;
        $this->container['prescription_no'] = isset($data['prescription_no']) ? $data['prescription_no'] : null;
        $this->container['prescription_item_no'] = isset($data['prescription_item_no']) ? $data['prescription_item_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getFormCodeAllowableValues();
        if (!is_null($this->container['form_code']) && !in_array($this->container['form_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'form_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProgressAllowableValues();
        if (!is_null($this->container['progress']) && !in_array($this->container['progress'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'progress', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDrugFormAllowableValues();
        if (!is_null($this->container['drug_form']) && !in_array($this->container['drug_form'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'drug_form', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets template
     *
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets kfa_code
     *
     * @return string
     */
    public function getKfaCode()
    {
        return $this->container['kfa_code'];
    }

    /**
     * Sets kfa_code
     *
     * @param string $kfa_code kfa_code
     *
     * @return $this
     */
    public function setKfaCode($kfa_code)
    {
        $this->container['kfa_code'] = $kfa_code;

        return $this;
    }

    /**
     * Gets form_code
     *
     * @return string
     */
    public function getFormCode()
    {
        return $this->container['form_code'];
    }

    /**
     * Sets form_code
     *
     * @param string $form_code form_code
     *
     * @return $this
     */
    public function setFormCode($form_code)
    {
        $allowedValues = $this->getFormCodeAllowableValues();
        if (!is_null($form_code) && !in_array($form_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'form_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['form_code'] = $form_code;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return string
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param string $progress progress
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $allowedValues = $this->getProgressAllowableValues();
        if (!is_null($progress) && !in_array($progress, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'progress', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code reason_code
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets interval_unit
     *
     * @return string
     */
    public function getIntervalUnit()
    {
        return $this->container['interval_unit'];
    }

    /**
     * Sets interval_unit
     *
     * @param string $interval_unit interval_unit
     *
     * @return $this
     */
    public function setIntervalUnit($interval_unit)
    {
        $this->container['interval_unit'] = $interval_unit;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets dosage
     *
     * @return int
     */
    public function getDosage()
    {
        return $this->container['dosage'];
    }

    /**
     * Sets dosage
     *
     * @param int $dosage dosage
     *
     * @return $this
     */
    public function setDosage($dosage)
    {
        $this->container['dosage'] = $dosage;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return \DateTime
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param \DateTime $period_start period_start
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return \DateTime
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param \DateTime $period_end period_end
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets drug_form
     *
     * @return string
     */
    public function getDrugForm()
    {
        return $this->container['drug_form'];
    }

    /**
     * Sets drug_form
     *
     * @param string $drug_form drug_form
     *
     * @return $this
     */
    public function setDrugForm($drug_form)
    {
        $allowedValues = $this->getDrugFormAllowableValues();
        if (!is_null($drug_form) && !in_array($drug_form, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'drug_form', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['drug_form'] = $drug_form;

        return $this;
    }

    /**
     * Gets route
     *
     * @return string
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param string $route route
     *
     * @return $this
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets patient_instruction
     *
     * @return string
     */
    public function getPatientInstruction()
    {
        return $this->container['patient_instruction'];
    }

    /**
     * Sets patient_instruction
     *
     * @param string $patient_instruction patient_instruction
     *
     * @return $this
     */
    public function setPatientInstruction($patient_instruction)
    {
        $this->container['patient_instruction'] = $patient_instruction;

        return $this;
    }

    /**
     * Gets additional_instruction
     *
     * @return string
     */
    public function getAdditionalInstruction()
    {
        return $this->container['additional_instruction'];
    }

    /**
     * Sets additional_instruction
     *
     * @param string $additional_instruction additional_instruction
     *
     * @return $this
     */
    public function setAdditionalInstruction($additional_instruction)
    {
        $this->container['additional_instruction'] = $additional_instruction;

        return $this;
    }

    /**
     * Gets ingredient
     *
     * @return \Mediator\SatuSehat\Lib\Client\Model\MedicationIngredient[]
     */
    public function getIngredient()
    {
        return $this->container['ingredient'];
    }

    /**
     * Sets ingredient
     *
     * @param \Mediator\SatuSehat\Lib\Client\Model\MedicationIngredient[] $ingredient ingredient
     *
     * @return $this
     */
    public function setIngredient($ingredient)
    {
        $this->container['ingredient'] = $ingredient;

        return $this;
    }

    /**
     * Gets dispense_location_id
     *
     * @return string
     */
    public function getDispenseLocationId()
    {
        return $this->container['dispense_location_id'];
    }

    /**
     * Sets dispense_location_id
     *
     * @param string $dispense_location_id dispense_location_id
     *
     * @return $this
     */
    public function setDispenseLocationId($dispense_location_id)
    {
        $this->container['dispense_location_id'] = $dispense_location_id;

        return $this;
    }

    /**
     * Gets iter
     *
     * @return int
     */
    public function getIter()
    {
        return $this->container['iter'];
    }

    /**
     * Sets iter
     *
     * @param int $iter iter
     *
     * @return $this
     */
    public function setIter($iter)
    {
        $this->container['iter'] = $iter;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets batch_exp
     *
     * @return \DateTime
     */
    public function getBatchExp()
    {
        return $this->container['batch_exp'];
    }

    /**
     * Sets batch_exp
     *
     * @param \DateTime $batch_exp batch_exp
     *
     * @return $this
     */
    public function setBatchExp($batch_exp)
    {
        $this->container['batch_exp'] = $batch_exp;

        return $this;
    }

    /**
     * Gets when_prepared
     *
     * @return \DateTime
     */
    public function getWhenPrepared()
    {
        return $this->container['when_prepared'];
    }

    /**
     * Sets when_prepared
     *
     * @param \DateTime $when_prepared when_prepared
     *
     * @return $this
     */
    public function setWhenPrepared($when_prepared)
    {
        $this->container['when_prepared'] = $when_prepared;

        return $this;
    }

    /**
     * Gets when_handed_over
     *
     * @return \DateTime
     */
    public function getWhenHandedOver()
    {
        return $this->container['when_handed_over'];
    }

    /**
     * Sets when_handed_over
     *
     * @param \DateTime $when_handed_over when_handed_over
     *
     * @return $this
     */
    public function setWhenHandedOver($when_handed_over)
    {
        $this->container['when_handed_over'] = $when_handed_over;

        return $this;
    }

    /**
     * Gets prescription_no
     *
     * @return string
     */
    public function getPrescriptionNo()
    {
        return $this->container['prescription_no'];
    }

    /**
     * Sets prescription_no
     *
     * @param string $prescription_no prescription_no
     *
     * @return $this
     */
    public function setPrescriptionNo($prescription_no)
    {
        $this->container['prescription_no'] = $prescription_no;

        return $this;
    }

    /**
     * Gets prescription_item_no
     *
     * @return string
     */
    public function getPrescriptionItemNo()
    {
        return $this->container['prescription_item_no'];
    }

    /**
     * Sets prescription_item_no
     *
     * @param string $prescription_item_no prescription_item_no
     *
     * @return $this
     */
    public function setPrescriptionItemNo($prescription_item_no)
    {
        $this->container['prescription_item_no'] = $prescription_item_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
