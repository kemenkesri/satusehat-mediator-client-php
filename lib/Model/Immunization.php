<?php
/**
 * Immunization
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Mediator  SATUSEHAT
 *
 * Spesifikasi API ini merupakan contoh untuk menggunakan **Mediator Interoperabilitas SATUSEHAT** yang secara khusus ditujukan untuk mempercepat dan memudahkan proses interoperabilitas data Rekam Medis Elektronik (RME) antara sistem informasi di Fasilitas Kesehatan (Rumah Sakit, Puskesmas, Klinik, Laboratorium, dll) dengan Platform SATUSEHAT.  Mediator Interoperabilitas SATUSEHAT menyediakan format custom yang disederhanakan dari format HL7 FHIR sebagai perantara antara sistem RME dengan SATUSEHAT beserta sistem informasi kesehatan yang ada ditingkat nasional.
 *
 * OpenAPI spec version: 1.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.59
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mediator\SatuSehat\Lib\Client\Model;

use Mediator\SatuSehat\Lib\Client\ObjectSerializer;

/**
 * Immunization Class Doc Comment
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Immunization extends MediatorResourceBasic
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Immunization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => 'string',
        'vaccine_code' => 'string',
        'occurrence_time' => '\DateTime',
        'recorded' => '\DateTime',
        'performer_type' => 'string',
        'performer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status' => null,
        'vaccine_code' => null,
        'occurrence_time' => 'date-time',
        'recorded' => 'date-time',
        'performer_type' => null,
        'performer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'vaccine_code' => 'vaccine_code',
        'occurrence_time' => 'occurrence_time',
        'recorded' => 'recorded',
        'performer_type' => 'performer_type',
        'performer' => 'performer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'vaccine_code' => 'setVaccineCode',
        'occurrence_time' => 'setOccurrenceTime',
        'recorded' => 'setRecorded',
        'performer_type' => 'setPerformerType',
        'performer' => 'setPerformer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'vaccine_code' => 'getVaccineCode',
        'occurrence_time' => 'getOccurrenceTime',
        'recorded' => 'getRecorded',
        'performer_type' => 'getPerformerType',
        'performer' => 'getPerformer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const STATUS_COMPLETED = 'completed';
    public const STATUS_NOT_DONE = 'not-done';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_NOT_DONE,
        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['vaccine_code'] = isset($data['vaccine_code']) ? $data['vaccine_code'] : null;
        $this->container['occurrence_time'] = isset($data['occurrence_time']) ? $data['occurrence_time'] : null;
        $this->container['recorded'] = isset($data['recorded']) ? $data['recorded'] : null;
        $this->container['performer_type'] = isset($data['performer_type']) ? $data['performer_type'] : null;
        $this->container['performer'] = isset($data['performer']) ? $data['performer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vaccine_code
     *
     * @return string
     */
    public function getVaccineCode()
    {
        return $this->container['vaccine_code'];
    }

    /**
     * Sets vaccine_code
     *
     * @param string $vaccine_code vaccine_code
     *
     * @return $this
     */
    public function setVaccineCode($vaccine_code)
    {
        $this->container['vaccine_code'] = $vaccine_code;

        return $this;
    }

    /**
     * Gets occurrence_time
     *
     * @return \DateTime
     */
    public function getOccurrenceTime()
    {
        return $this->container['occurrence_time'];
    }

    /**
     * Sets occurrence_time
     *
     * @param \DateTime $occurrence_time occurrence_time
     *
     * @return $this
     */
    public function setOccurrenceTime($occurrence_time)
    {
        $this->container['occurrence_time'] = $occurrence_time;

        return $this;
    }

    /**
     * Gets recorded
     *
     * @return \DateTime
     */
    public function getRecorded()
    {
        return $this->container['recorded'];
    }

    /**
     * Sets recorded
     *
     * @param \DateTime $recorded recorded
     *
     * @return $this
     */
    public function setRecorded($recorded)
    {
        $this->container['recorded'] = $recorded;

        return $this;
    }

    /**
     * Gets performer_type
     *
     * @return string
     */
    public function getPerformerType()
    {
        return $this->container['performer_type'];
    }

    /**
     * Sets performer_type
     *
     * @param string $performer_type performer_type
     *
     * @return $this
     */
    public function setPerformerType($performer_type)
    {
        $this->container['performer_type'] = $performer_type;

        return $this;
    }

    /**
     * Gets performer
     *
     * @return string
     */
    public function getPerformer()
    {
        return $this->container['performer'];
    }

    /**
     * Sets performer
     *
     * @param string $performer performer
     *
     * @return $this
     */
    public function setPerformer($performer)
    {
        $this->container['performer'] = $performer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
