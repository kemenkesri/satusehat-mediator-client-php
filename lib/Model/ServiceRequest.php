<?php
/**
 * ServiceRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Mediator  SATUSEHAT
 *
 * Spesifikasi API ini merupakan contoh untuk menggunakan **Mediator Interoperabilitas SATUSEHAT** yang secara khusus ditujukan untuk mempercepat dan memudahkan proses interoperabilitas data Rekam Medis Elektronik (RME) antara sistem informasi di Fasilitas Kesehatan (Rumah Sakit, Puskesmas, Klinik, Laboratorium, dll) dengan Platform SATUSEHAT.  Mediator Interoperabilitas SATUSEHAT menyediakan format custom yang disederhanakan dari format HL7 FHIR sebagai perantara antara sistem RME dengan SATUSEHAT beserta sistem informasi kesehatan yang ada ditingkat nasional.
 *
 * OpenAPI spec version: 1.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.59
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mediator\SatuSehat\Lib\Client\Model;

use Mediator\SatuSehat\Lib\Client\ObjectSerializer;

/**
 * ServiceRequest Class Doc Comment
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceRequest extends MediatorResourceBasic
{
    public static $DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'referral_no' => 'string',
        'code_request' => 'string',
        'faskes_tujuan' => 'string',
        'referral_status' => 'string',
        'location_code' => 'string',
        'requested_time' => '\DateTime',
        'requester_type' => 'string',
        'requester' => 'string',
        'reason_code' => 'string',
        'reason_detail' => 'string',
        'occurrence_time' => '\DateTime',
        'reason_observation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'referral_no' => null,
        'code_request' => null,
        'faskes_tujuan' => null,
        'referral_status' => null,
        'location_code' => null,
        'requested_time' => 'date-time',
        'requester_type' => null,
        'requester' => null,
        'reason_code' => null,
        'reason_detail' => null,
        'occurrence_time' => 'date-time',
        'reason_observation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'referral_no' => 'referral_no',
        'code_request' => 'code_request',
        'faskes_tujuan' => 'faskes_tujuan',
        'referral_status' => 'referral_status',
        'location_code' => 'location_code',
        'requested_time' => 'requested_time',
        'requester_type' => 'requester_type',
        'requester' => 'requester',
        'reason_code' => 'reason_code',
        'reason_detail' => 'reason_detail',
        'occurrence_time' => 'occurrence_time',
        'reason_observation' => 'reason_observation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'referral_no' => 'setReferralNo',
        'code_request' => 'setCodeRequest',
        'faskes_tujuan' => 'setFaskesTujuan',
        'referral_status' => 'setReferralStatus',
        'location_code' => 'setLocationCode',
        'requested_time' => 'setRequestedTime',
        'requester_type' => 'setRequesterType',
        'requester' => 'setRequester',
        'reason_code' => 'setReasonCode',
        'reason_detail' => 'setReasonDetail',
        'occurrence_time' => 'setOccurrenceTime',
        'reason_observation' => 'setReasonObservation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'referral_no' => 'getReferralNo',
        'code_request' => 'getCodeRequest',
        'faskes_tujuan' => 'getFaskesTujuan',
        'referral_status' => 'getReferralStatus',
        'location_code' => 'getLocationCode',
        'requested_time' => 'getRequestedTime',
        'requester_type' => 'getRequesterType',
        'requester' => 'getRequester',
        'reason_code' => 'getReasonCode',
        'reason_detail' => 'getReasonDetail',
        'occurrence_time' => 'getOccurrenceTime',
        'reason_observation' => 'getReasonObservation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public static $REFERRAL_STATUS__3457005 = '3457005';
    public static $REFERRAL_STATUS__306098008 = '306098008';
    public static $REQUESTER_TYPE_ORGANIZATION = 'Organization';
    public static $REQUESTER_TYPE_PRACTITIONER = 'Practitioner';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReferralStatusAllowableValues()
    {
        return [
            self::$REFERRAL_STATUS__3457005,
            self::$REFERRAL_STATUS__306098008,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequesterTypeAllowableValues()
    {
        return [
            self::$REQUESTER_TYPE_ORGANIZATION,
            self::$REQUESTER_TYPE_PRACTITIONER,
        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['referral_no'] = isset($data['referral_no']) ? $data['referral_no'] : null;
        $this->container['code_request'] = isset($data['code_request']) ? $data['code_request'] : null;
        $this->container['faskes_tujuan'] = isset($data['faskes_tujuan']) ? $data['faskes_tujuan'] : null;
        $this->container['referral_status'] = isset($data['referral_status']) ? $data['referral_status'] : null;
        $this->container['location_code'] = isset($data['location_code']) ? $data['location_code'] : null;
        $this->container['requested_time'] = isset($data['requested_time']) ? $data['requested_time'] : null;
        $this->container['requester_type'] = isset($data['requester_type']) ? $data['requester_type'] : null;
        $this->container['requester'] = isset($data['requester']) ? $data['requester'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['reason_detail'] = isset($data['reason_detail']) ? $data['reason_detail'] : null;
        $this->container['occurrence_time'] = isset($data['occurrence_time']) ? $data['occurrence_time'] : null;
        $this->container['reason_observation'] = isset($data['reason_observation']) ? $data['reason_observation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getReferralStatusAllowableValues();
        if (!is_null($this->container['referral_status']) && !in_array($this->container['referral_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'referral_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequesterTypeAllowableValues();
        if (!is_null($this->container['requester_type']) && !in_array($this->container['requester_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'requester_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets referral_no
     *
     * @return string
     */
    public function getReferralNo()
    {
        return $this->container['referral_no'];
    }

    /**
     * Sets referral_no
     *
     * @param string $referral_no referral_no
     *
     * @return $this
     */
    public function setReferralNo($referral_no)
    {
        $this->container['referral_no'] = $referral_no;

        return $this;
    }

    /**
     * Gets code_request
     *
     * @return string
     */
    public function getCodeRequest()
    {
        return $this->container['code_request'];
    }

    /**
     * Sets code_request
     *
     * @param string $code_request code_request
     *
     * @return $this
     */
    public function setCodeRequest($code_request)
    {
        $this->container['code_request'] = $code_request;

        return $this;
    }

    /**
     * Gets faskes_tujuan
     *
     * @return string
     */
    public function getFaskesTujuan()
    {
        return $this->container['faskes_tujuan'];
    }

    /**
     * Sets faskes_tujuan
     *
     * @param string $faskes_tujuan faskes_tujuan
     *
     * @return $this
     */
    public function setFaskesTujuan($faskes_tujuan)
    {
        $this->container['faskes_tujuan'] = $faskes_tujuan;

        return $this;
    }

    /**
     * Gets referral_status
     *
     * @return string
     */
    public function getReferralStatus()
    {
        return $this->container['referral_status'];
    }

    /**
     * Sets referral_status
     *
     * @param string $referral_status referral_status
     *
     * @return $this
     */
    public function setReferralStatus($referral_status)
    {
        $allowedValues = $this->getReferralStatusAllowableValues();
        if (!is_null($referral_status) && !in_array($referral_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'referral_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['referral_status'] = $referral_status;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string $location_code location_code
     *
     * @return $this
     */
    public function setLocationCode($location_code)
    {
        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets requested_time
     *
     * @return \DateTime
     */
    public function getRequestedTime()
    {
        return $this->container['requested_time'];
    }

    /**
     * Sets requested_time
     *
     * @param \DateTime $requested_time requested_time
     *
     * @return $this
     */
    public function setRequestedTime($requested_time)
    {
        $this->container['requested_time'] = $requested_time;

        return $this;
    }

    /**
     * Gets requester_type
     *
     * @return string
     */
    public function getRequesterType()
    {
        return $this->container['requester_type'];
    }

    /**
     * Sets requester_type
     *
     * @param string $requester_type requester_type
     *
     * @return $this
     */
    public function setRequesterType($requester_type)
    {
        $allowedValues = $this->getRequesterTypeAllowableValues();
        if (!is_null($requester_type) && !in_array($requester_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'requester_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requester_type'] = $requester_type;

        return $this;
    }

    /**
     * Gets requester
     *
     * @return string
     */
    public function getRequester()
    {
        return $this->container['requester'];
    }

    /**
     * Sets requester
     *
     * @param string $requester requester
     *
     * @return $this
     */
    public function setRequester($requester)
    {
        $this->container['requester'] = $requester;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code reason_code
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets reason_detail
     *
     * @return string
     */
    public function getReasonDetail()
    {
        return $this->container['reason_detail'];
    }

    /**
     * Sets reason_detail
     *
     * @param string $reason_detail reason_detail
     *
     * @return $this
     */
    public function setReasonDetail($reason_detail)
    {
        $this->container['reason_detail'] = $reason_detail;

        return $this;
    }

    /**
     * Gets occurrence_time
     *
     * @return \DateTime
     */
    public function getOccurrenceTime()
    {
        return $this->container['occurrence_time'];
    }

    /**
     * Sets occurrence_time
     *
     * @param \DateTime $occurrence_time occurrence_time
     *
     * @return $this
     */
    public function setOccurrenceTime($occurrence_time)
    {
        $this->container['occurrence_time'] = $occurrence_time;

        return $this;
    }

    /**
     * Gets reason_observation
     *
     * @return string
     */
    public function getReasonObservation()
    {
        return $this->container['reason_observation'];
    }

    /**
     * Sets reason_observation
     *
     * @param string $reason_observation reason_observation
     *
     * @return $this
     */
    public function setReasonObservation($reason_observation)
    {
        $this->container['reason_observation'] = $reason_observation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
