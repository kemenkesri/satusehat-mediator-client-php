<?php
/**
 * TbPerson
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Mediator  SATUSEHAT
 *
 * Spesifikasi API ini merupakan contoh untuk menggunakan **Mediator Interoperabilitas SATUSEHAT** yang secara khusus ditujukan untuk mempercepat dan memudahkan proses interoperabilitas data Rekam Medis Elektronik (RME) antara sistem informasi di Fasilitas Kesehatan (Rumah Sakit, Puskesmas, Klinik, Laboratorium, dll) dengan Platform SATUSEHAT.  Mediator Interoperabilitas SATUSEHAT menyediakan format custom yang disederhanakan dari format HL7 FHIR sebagai perantara antara sistem RME dengan SATUSEHAT beserta sistem informasi kesehatan yang ada ditingkat nasional.
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mediator\SatuSehat\Lib\Client\Model;
use Mediator\SatuSehat\Lib\Client\ObjectSerializer;

/**
 * TbPerson Class Doc Comment
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TbPerson extends MediatorResourceBasic 
{
    public static $DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TbPerson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'nama' => 'string',
        'nama_pangilan' => 'string',
        'nik' => 'string',
        'tempat_lahir' => 'string',
        'tanggal_lahir' => '\DateTime',
        'umur' => 'float',
        'umur_bl' => 'float',
        'jenis_kelamin_id' => 'string',
        'alamat' => 'string',
        'provinsi_id' => 'string',
        'kabupaten_id' => 'string',
        'kecamatan_id' => 'string',
        'kelurahan_id' => 'string',
        'unit_id' => 'string',
        'pekerjaan_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'nama' => null,
        'nama_pangilan' => null,
        'nik' => null,
        'tempat_lahir' => null,
        'tanggal_lahir' => 'date',
        'umur' => null,
        'umur_bl' => null,
        'jenis_kelamin_id' => null,
        'alamat' => null,
        'provinsi_id' => null,
        'kabupaten_id' => null,
        'kecamatan_id' => null,
        'kelurahan_id' => null,
        'unit_id' => null,
        'pekerjaan_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'nama' => 'nama',
        'nama_pangilan' => 'nama_pangilan',
        'nik' => 'nik',
        'tempat_lahir' => 'tempat_lahir',
        'tanggal_lahir' => 'tanggal_lahir',
        'umur' => 'umur',
        'umur_bl' => 'umur_bl',
        'jenis_kelamin_id' => 'jenis_kelamin_id',
        'alamat' => 'alamat',
        'provinsi_id' => 'provinsi_id',
        'kabupaten_id' => 'kabupaten_id',
        'kecamatan_id' => 'kecamatan_id',
        'kelurahan_id' => 'kelurahan_id',
        'unit_id' => 'unit_id',
        'pekerjaan_id' => 'pekerjaan_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'nama' => 'setNama',
        'nama_pangilan' => 'setNamaPangilan',
        'nik' => 'setNik',
        'tempat_lahir' => 'setTempatLahir',
        'tanggal_lahir' => 'setTanggalLahir',
        'umur' => 'setUmur',
        'umur_bl' => 'setUmurBl',
        'jenis_kelamin_id' => 'setJenisKelaminId',
        'alamat' => 'setAlamat',
        'provinsi_id' => 'setProvinsiId',
        'kabupaten_id' => 'setKabupatenId',
        'kecamatan_id' => 'setKecamatanId',
        'kelurahan_id' => 'setKelurahanId',
        'unit_id' => 'setUnitId',
        'pekerjaan_id' => 'setPekerjaanId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'nama' => 'getNama',
        'nama_pangilan' => 'getNamaPangilan',
        'nik' => 'getNik',
        'tempat_lahir' => 'getTempatLahir',
        'tanggal_lahir' => 'getTanggalLahir',
        'umur' => 'getUmur',
        'umur_bl' => 'getUmurBl',
        'jenis_kelamin_id' => 'getJenisKelaminId',
        'alamat' => 'getAlamat',
        'provinsi_id' => 'getProvinsiId',
        'kabupaten_id' => 'getKabupatenId',
        'kecamatan_id' => 'getKecamatanId',
        'kelurahan_id' => 'getKelurahanId',
        'unit_id' => 'getUnitId',
        'pekerjaan_id' => 'getPekerjaanId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JENIS_KELAMIN_ID__1 = '1';
    const JENIS_KELAMIN_ID__2 = '2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJenisKelaminIdAllowableValues()
    {
        return [
            self::JENIS_KELAMIN_ID__1,
            self::JENIS_KELAMIN_ID__2,
        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['nama'] = isset($data['nama']) ? $data['nama'] : null;
        $this->container['nama_pangilan'] = isset($data['nama_pangilan']) ? $data['nama_pangilan'] : null;
        $this->container['nik'] = isset($data['nik']) ? $data['nik'] : null;
        $this->container['tempat_lahir'] = isset($data['tempat_lahir']) ? $data['tempat_lahir'] : null;
        $this->container['tanggal_lahir'] = isset($data['tanggal_lahir']) ? $data['tanggal_lahir'] : null;
        $this->container['umur'] = isset($data['umur']) ? $data['umur'] : null;
        $this->container['umur_bl'] = isset($data['umur_bl']) ? $data['umur_bl'] : null;
        $this->container['jenis_kelamin_id'] = isset($data['jenis_kelamin_id']) ? $data['jenis_kelamin_id'] : null;
        $this->container['alamat'] = isset($data['alamat']) ? $data['alamat'] : null;
        $this->container['provinsi_id'] = isset($data['provinsi_id']) ? $data['provinsi_id'] : null;
        $this->container['kabupaten_id'] = isset($data['kabupaten_id']) ? $data['kabupaten_id'] : null;
        $this->container['kecamatan_id'] = isset($data['kecamatan_id']) ? $data['kecamatan_id'] : null;
        $this->container['kelurahan_id'] = isset($data['kelurahan_id']) ? $data['kelurahan_id'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['pekerjaan_id'] = isset($data['pekerjaan_id']) ? $data['pekerjaan_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getJenisKelaminIdAllowableValues();
        if (!is_null($this->container['jenis_kelamin_id']) && !in_array($this->container['jenis_kelamin_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'jenis_kelamin_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets nama
     *
     * @return string
     */
    public function getNama()
    {
        return $this->container['nama'];
    }

    /**
     * Sets nama
     *
     * @param string $nama nama
     *
     * @return $this
     */
    public function setNama($nama)
    {
        $this->container['nama'] = $nama;

        return $this;
    }

    /**
     * Gets nama_pangilan
     *
     * @return string
     */
    public function getNamaPangilan()
    {
        return $this->container['nama_pangilan'];
    }

    /**
     * Sets nama_pangilan
     *
     * @param string $nama_pangilan nama_pangilan
     *
     * @return $this
     */
    public function setNamaPangilan($nama_pangilan)
    {
        $this->container['nama_pangilan'] = $nama_pangilan;

        return $this;
    }

    /**
     * Gets nik
     *
     * @return string
     */
    public function getNik()
    {
        return $this->container['nik'];
    }

    /**
     * Sets nik
     *
     * @param string $nik nik
     *
     * @return $this
     */
    public function setNik($nik)
    {
        $this->container['nik'] = $nik;

        return $this;
    }

    /**
     * Gets tempat_lahir
     *
     * @return string
     */
    public function getTempatLahir()
    {
        return $this->container['tempat_lahir'];
    }

    /**
     * Sets tempat_lahir
     *
     * @param string $tempat_lahir tempat_lahir
     *
     * @return $this
     */
    public function setTempatLahir($tempat_lahir)
    {
        $this->container['tempat_lahir'] = $tempat_lahir;

        return $this;
    }

    /**
     * Gets tanggal_lahir
     *
     * @return \DateTime
     */
    public function getTanggalLahir()
    {
        return $this->container['tanggal_lahir'];
    }

    /**
     * Sets tanggal_lahir
     *
     * @param \DateTime $tanggal_lahir tanggal_lahir
     *
     * @return $this
     */
    public function setTanggalLahir($tanggal_lahir)
    {
        $this->container['tanggal_lahir'] = $tanggal_lahir;

        return $this;
    }

    /**
     * Gets umur
     *
     * @return float
     */
    public function getUmur()
    {
        return $this->container['umur'];
    }

    /**
     * Sets umur
     *
     * @param float $umur umur
     *
     * @return $this
     */
    public function setUmur($umur)
    {
        $this->container['umur'] = $umur;

        return $this;
    }

    /**
     * Gets umur_bl
     *
     * @return float
     */
    public function getUmurBl()
    {
        return $this->container['umur_bl'];
    }

    /**
     * Sets umur_bl
     *
     * @param float $umur_bl umur_bl
     *
     * @return $this
     */
    public function setUmurBl($umur_bl)
    {
        $this->container['umur_bl'] = $umur_bl;

        return $this;
    }

    /**
     * Gets jenis_kelamin_id
     *
     * @return string
     */
    public function getJenisKelaminId()
    {
        return $this->container['jenis_kelamin_id'];
    }

    /**
     * Sets jenis_kelamin_id
     *
     * @param string $jenis_kelamin_id jenis_kelamin_id
     *
     * @return $this
     */
    public function setJenisKelaminId($jenis_kelamin_id)
    {
        $allowedValues = $this->getJenisKelaminIdAllowableValues();
        if (!is_null($jenis_kelamin_id) && !in_array($jenis_kelamin_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'jenis_kelamin_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jenis_kelamin_id'] = $jenis_kelamin_id;

        return $this;
    }

    /**
     * Gets alamat
     *
     * @return string
     */
    public function getAlamat()
    {
        return $this->container['alamat'];
    }

    /**
     * Sets alamat
     *
     * @param string $alamat alamat
     *
     * @return $this
     */
    public function setAlamat($alamat)
    {
        $this->container['alamat'] = $alamat;

        return $this;
    }

    /**
     * Gets provinsi_id
     *
     * @return string
     */
    public function getProvinsiId()
    {
        return $this->container['provinsi_id'];
    }

    /**
     * Sets provinsi_id
     *
     * @param string $provinsi_id provinsi_id
     *
     * @return $this
     */
    public function setProvinsiId($provinsi_id)
    {
        $this->container['provinsi_id'] = $provinsi_id;

        return $this;
    }

    /**
     * Gets kabupaten_id
     *
     * @return string
     */
    public function getKabupatenId()
    {
        return $this->container['kabupaten_id'];
    }

    /**
     * Sets kabupaten_id
     *
     * @param string $kabupaten_id kabupaten_id
     *
     * @return $this
     */
    public function setKabupatenId($kabupaten_id)
    {
        $this->container['kabupaten_id'] = $kabupaten_id;

        return $this;
    }

    /**
     * Gets kecamatan_id
     *
     * @return string
     */
    public function getKecamatanId()
    {
        return $this->container['kecamatan_id'];
    }

    /**
     * Sets kecamatan_id
     *
     * @param string $kecamatan_id kecamatan_id
     *
     * @return $this
     */
    public function setKecamatanId($kecamatan_id)
    {
        $this->container['kecamatan_id'] = $kecamatan_id;

        return $this;
    }

    /**
     * Gets kelurahan_id
     *
     * @return string
     */
    public function getKelurahanId()
    {
        return $this->container['kelurahan_id'];
    }

    /**
     * Sets kelurahan_id
     *
     * @param string $kelurahan_id kelurahan_id
     *
     * @return $this
     */
    public function setKelurahanId($kelurahan_id)
    {
        $this->container['kelurahan_id'] = $kelurahan_id;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets pekerjaan_id
     *
     * @return string
     */
    public function getPekerjaanId()
    {
        return $this->container['pekerjaan_id'];
    }

    /**
     * Sets pekerjaan_id
     *
     * @param string $pekerjaan_id pekerjaan_id
     *
     * @return $this
     */
    public function setPekerjaanId($pekerjaan_id)
    {
        $this->container['pekerjaan_id'] = $pekerjaan_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
