<?php
/**
 * Configuration
 * PHP version 5
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Mediator  SATUSEHAT
 *
 * Spesifikasi API ini merupakan contoh untuk menggunakan **Mediator Interoperabilitas SATUSEHAT** yang secara khusus ditujukan untuk mempercepat dan memudahkan proses interoperabilitas data Rekam Medis Elektronik (RME) antara sistem informasi di Fasilitas Kesehatan (Rumah Sakit, Puskesmas, Klinik, Laboratorium, dll) dengan Platform SATUSEHAT.  Mediator Interoperabilitas SATUSEHAT menyediakan format custom yang disederhanakan dari format HL7 FHIR sebagai perantara antara sistem RME dengan SATUSEHAT beserta sistem informasi kesehatan yang ada ditingkat nasional.
 *
 * OpenAPI spec version: 1.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.59
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mediator\SatuSehat\Lib\Client;

/**
 * Configuration Class Doc Comment
 * PHP version 5
 *
 * @category Class
 * @package  Mediator\SatuSehat\Lib\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Configuration
{
    private static ?Configuration $defaultConfiguration = null;

    /** @var ConfigurationConstant[] */
    private static array $CONSTANTS = [
        'development' => [
            'authUrl' => 'https://api-satusehat-stg.dto.kemkes.go.id/oauth2/v1/accesstoken',
            'tokenUrl' => 'https://api-satusehat-stg.dto.kemkes.go.id/oauth2/v1/refreshtoken',
            'baseUrl' => 'https://mediator-satusehat.kemkes.go.id/api-dev/satusehat/rme/v1.0',
            'clientId' => null,
            'clientSecret' => null,
            'bearerToken' => null,
            'timezone' => '+07:00',
        ],
        'production' => [
            'authUrl' => 'https://api-satusehat.kemkes.go.id/oauth2/v1/accesstoken',
            'tokenUrl' => 'https://api-satusehat.kemkes.go.id/oauth2/v1/refreshtoken',
            'baseUrl' => 'https://mediator-satusehat.kemkes.go.id/api/satusehat/rme/v1.0',
            'clientId' => null,
            'clientSecret' => null,
            'bearerToken' => null,
            'timezone' => '+07:00',
        ]
    ];

    /**
     * Associate array to store API key(s)
     *
     * @var string $apiKeys
     */
    protected ?string $apiKeys = null;

    /**
     * Associate array to store API prefix (e.g. Bearer)
     *
     * @var string|null
     */
    protected ?string $apiKeyPrefixes = null;

    /**
     * Access token for OAuth
     *
     * @var string|null
     */
    protected ?string $accessToken = null;


    /**
     * Username for HTTP basic authentication
     *
     * @var string|null
     */
    protected ?string $username = null;

    /**
     * Password for HTTP basic authentication
     *
     * @var string|null
     */
    protected ?string $password = null;

    /**
     * The Base URL
     *
     * @var string|null
     */
    protected ?string $satusehatUrl = null;


    /**
     * The Base URL
     *
     * @var string|null
     */
    protected ?string $baseUrl = null;

    /**
     * The OAuth2 Authentication URL
     *
     * @var string|null
     */
    protected ?string $authUrl = null;

    /**
     * The OAuth2 Refresh Token URL
     *
     * @var string|null
     */
    protected ?string $tokenUrl = null;

    /**
     * The OAuth2 Credential ClientID
     *
     * @var string|null
     */
    protected ?string $clientId = null;

    /**
     * The OAuth2 Credential ClientSecret
     *
     * @var string|null
     */
    protected ?string $clientSecret = null;

    /**
     * The OAuth2 Bearer Token
     *
     * @var string|null
     */
    protected ?string $bearerToken = null;

    /**
     * The Timezone
     *
     * @var string|null
     */
    protected ?string $timezone = null;

    /**
     * User agent of the HTTP request, set to "PHP-Swagger" by default
     *
     * @var string
     */
    protected string $userAgent = 'Mediator-SatuSehat-Client/1.0.0/php';

    /**
     * Debug switch (default set to false)
     *
     * @var bool
     */
    protected bool $debug = false;

    /**
     * Debug file location (log to STDOUT by default)
     *
     * @var string
     */
    protected string $debugFile = 'php://output';

    /**
     * Debug file location (log to STDOUT by default)
     *
     * @var ?string
     */
    protected static string $environment = 'development';

    /**
     * Debug file location (log to STDOUT by default)
     *
     * @var string|null
     */
    protected ?string $tempFolderPath = null;

    /**
     * Constructor
     */
    public function __construct(?string $name = null)
    {
        if (empty($name)) {
            $name = self::$environment;
        }
        $this->tempFolderPath = sys_get_temp_dir();
        $constant = self::$CONSTANTS[$name];
        $this->satusehatUrl = !empty($constant->satusehatUrl) ? $constant->satusehatUrl : null;
        $this->baseUrl = !empty($constant->baseUrl) ? $constant->baseUrl : null;
        $this->authUrl = !empty($constant->authUrl) ? $constant->authUrl : null;
        $this->tokenUrl = !empty($constant->tokenUrl) ? $constant->tokenUrl : null;
        $this->clientId = !empty($constant->clientId) ? $constant->clientId : null;
        $this->clientSecret = !empty($constant->clientSecret) ? $constant->clientSecret : null;
        $this->bearerToken = !empty($constant->bearerToken) ? $constant->bearerToken : null;
        $this->timezone = !empty($constant->timezone) ? $constant->timezone : null;
    }

    /**
     * Sets API key
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     * @param string $key API key or token
     *
     * @return $this
     */
    public function setApiKey(string $apiKeyIdentifier, string $key): Configuration
    {
        $this->apiKeys[$apiKeyIdentifier] = $key;
        return $this;
    }

    /**
     * Gets API key
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     *
     * @return string API key or token
     */
    public function getApiKey(string $apiKeyIdentifier): ?string
    {
        return !empty($this->apiKeys[$apiKeyIdentifier]) ? $this->apiKeys[$apiKeyIdentifier] : null;
    }

    /**
     * Sets the prefix for API key (e.g. Bearer)
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     * @param string $prefix API key prefix, e.g. Bearer
     *
     * @return $this
     */
    public function setApiKeyPrefix(string $apiKeyIdentifier, string $prefix): Configuration
    {
        $this->apiKeyPrefixes[$apiKeyIdentifier] = $prefix;
        return $this;
    }

    /**
     * Gets API key prefix
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     *
     * @return string
     */
    public function getApiKeyPrefix(string $apiKeyIdentifier): ?string
    {
        return !empty($this->apiKeyPrefixes[$apiKeyIdentifier]) ? $this->apiKeyPrefixes[$apiKeyIdentifier] : null;
    }

    /**
     * Sets the access token for OAuth
     *
     * @param string $accessToken Token for OAuth
     *
     * @return $this
     */
    public function setAccessToken(string $accessToken): Configuration
    {
        $this->accessToken = $accessToken;
        return $this;
    }

    /**
     * Gets the access token for OAuth
     *
     * @return string Access token for OAuth
     */
    public function getAccessToken(): ?string
    {
        return $this->accessToken;
    }

    /**
     * Sets the username for HTTP basic authentication
     *
     * @param string $username Username for HTTP basic authentication
     *
     * @return $this
     */
    public function setUsername(string $username): Configuration
    {
        $this->username = $username;
        return $this;
    }

    /**
     * Gets the username for HTTP basic authentication
     *
     * @return string Username for HTTP basic authentication
     */
    public function getUsername(): ?string
    {
        return $this->username;
    }

    /**
     * Sets the password for HTTP basic authentication
     *
     * @param string $password Password for HTTP basic authentication
     *
     * @return $this
     */
    public function setPassword(string $password): Configuration
    {
        $this->password = $password;
        return $this;
    }

    /**
     * Gets the password for HTTP basic authentication
     *
     * @return string Password for HTTP basic authentication
     */
    public function getPassword(): ?string
    {
        return $this->password;
    }

    /**
     * Sets the Base URL
     *
     * @param string $baseUrl Host
     *
     * @return $this
     */
    public function setBaseUrl(string $baseUrl): Configuration
    {
        $this->baseUrl = $baseUrl;
        return $this;
    }

    /**
     * Gets the SATUSEHAT base URL
     *
     * @return string SATUSEHAT Base URL
     */
    public function getBaseUrl(): ?string
    {
        return $this->baseUrl;
    }

    /**
     * Sets the SATUSEHAT Base URL
     *
     * @param string $satusehatUrl Host
     *
     * @return $this
     */
    public function setSatusehatUrl(string $satusehatUrl): Configuration
    {
        $this->satusehatUrl = $satusehatUrl;
        return $this;
    }

    /**
     * Gets the SATUSEHAT base URL
     *
     * @return string SATUSEHAT Base URL
     */
    public function getSatusehatUrl(): ?string
    {
        return $this->satusehatUrl;
    }

    /**
     * Sets the Authentication URL
     *
     * @param string $authUrl Host
     *
     * @return $this
     */
    public function setAuthUrl(string $authUrl): Configuration
    {
        $this->authUrl = $authUrl;
        return $this;
    }

    /**
     * Gets the Authentication URL
     *
     * @return string Authentication URL
     */
    public function getAuthUrl(): ?string
    {
        return $this->authUrl;
    }

    /**
     * Sets the token URL
     *
     * @param string $tokenUrl Host
     *
     * @return $this
     */
    public function setTokenUrl(string $tokenUrl): Configuration
    {
        $this->tokenUrl = $tokenUrl;
        return $this;
    }

    /**
     * Gets the token URL
     *
     * @return string token URL
     */
    public function getTokenUrl(): ?string
    {
        return $this->tokenUrl;
    }

    /**
     * Sets the Credential Client ID
     *
     * @param string $clientId Client ID
     *
     * @return $this
     */
    public function setClientId(string $clientId): Configuration
    {
        $this->clientId = $clientId;
        return $this;
    }

    /**
     * Gets the Credential Client ID
     *
     * @return string Credential Client ID
     */
    public function getClientId(): ?string
    {
        return $this->clientId;
    }

    /**
     * Sets the Credential Client Secret
     *
     * @param string $clientSecret Client Secret
     *
     * @return $this
     */
    public function setClientSecret(string $clientSecret): Configuration
    {
        $this->clientSecret = $clientSecret;
        return $this;
    }

    /**
     * Gets the Credential Client Secret
     *
     * @return string Credential Client Secret
     */
    public function getClientSecret(): ?string
    {
        return $this->clientSecret;
    }

    /**
     * Sets the Bearer Token
     *
     * @param string $bearerToken Bearer Token
     *
     * @return $this
     */
    public function setBearerToken(string $bearerToken): Configuration
    {
        $this->bearerToken = $bearerToken;
        return $this;
    }

    /**
     * Gets the Bearer Token
     *
     * @return string Bearer Token
     */
    public function getBearerToken(): ?string
    {
        return $this->bearerToken;
    }

    /**
     * Sets the Timezone
     *
     * @param string $timezone Timezone
     *
     * @return $this
     */
    public function setTimezone(string $timezone): Configuration
    {
        $this->timezone = $timezone;
        return $this;
    }

    /**
     * Gets the Timezone
     *
     * @return string Timezone
     */
    public function getTimezone(): ?string
    {
        return $this->timezone;
    }

    public function getAuthType(): ?string
    {

        // print_r($this->bearerToken);exit;
        return $this->clientId && $this->clientSecret ? 'credential' : ($this->bearerToken ? 'bearer' : null);
    }

    /**
     * Sets the user agent of the api client
     *
     * @param string $userAgent the user agent of the api client
     *
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setUserAgent(string $userAgent): Configuration
    {
        $this->userAgent = $userAgent;
        return $this;
    }

    /**
     * Gets the user agent of the api client
     *
     * @return string user agent
     */
    public function getUserAgent(): string
    {
        return $this->userAgent;
    }

    /**
     * Sets debug flag
     *
     * @param bool $debug Debug flag
     *
     * @return $this
     */
    public function setDebug(bool $debug): Configuration
    {
        $this->debug = $debug;
        return $this;
    }

    /**
     * Gets the debug flag
     *
     * @return bool
     */
    public function getDebug(): bool
    {
        return $this->debug;
    }

    /**
     * Sets the debug file
     *
     * @param string $debugFile Debug file
     *
     * @return $this
     */
    public function setDebugFile(string $debugFile): Configuration
    {
        $this->debugFile = $debugFile;
        return $this;
    }

    /**
     * Gets the debug file
     *
     * @return string
     */
    public function getDebugFile(): string
    {
        return $this->debugFile;
    }

    /**
     * Sets the temp folder path
     *
     * @param string $tempFolderPath Temp folder path
     *
     * @return $this
     */
    public function setTempFolderPath(string $tempFolderPath): Configuration
    {
        $this->tempFolderPath = $tempFolderPath;
        return $this;
    }

    /**
     * Gets the temp folder path
     *
     * @return string Temp folder path
     */
    public function getTempFolderPath(): ?string
    {
        return $this->tempFolderPath;
    }

    /**
     * Set the configuration constant
     *
     * @param string $name
     * @param ConfigurationConstant $constant
     *
     * @return void
     */
    public static function setConfigurationConstant(string $name, ConfigurationConstant $constant): void
    {
        self::$environment = $name;
        self::$CONSTANTS[$name] = $constant;
    }

    /**
     * Gets the default configuration instance
     *
     * @param string|null $name
     * @return Configuration
     */
    public static function getDefaultConfiguration(?string $name = null): Configuration
    {
        if (empty($name)) {
            $name = self::$environment;
        }
        if (self::$defaultConfiguration === null) {
            self::$defaultConfiguration = new Configuration($name);
        }

        return self::$defaultConfiguration;
    }

    /**
     * Sets the detault configuration instance
     *
     * @param Configuration $config An instance of the Configuration Object
     *
     * @return void
     */
    public static function setDefaultConfiguration(Configuration $config)
    {
        self::$defaultConfiguration = $config;
    }

    /**
     * Gets the essential information for debugging
     *
     * @return string The report for debugging
     */
    public static function toDebugReport(): string
    {
        $report = 'PHP SDK (Mediator\SatuSehat\Lib\Client) Debug Report:' . PHP_EOL;
        $report .= '    OS: ' . php_uname() . PHP_EOL;
        $report .= '    PHP Version: ' . PHP_VERSION . PHP_EOL;
        $report .= '    OpenAPI Spec Version: 1.0.1' . PHP_EOL;
        $report .= '    Temp Folder Path: ' . self::getDefaultConfiguration()->getTempFolderPath() . PHP_EOL;

        return $report;
    }

    /**
     * Get API key (with prefix if set)
     *
     * @param string $apiKeyIdentifier name of apikey
     *
     * @return string API key with the prefix
     */
    public function getApiKeyWithPrefix($apiKeyIdentifier): ?string
    {
        $prefix = $this->getApiKeyPrefix($apiKeyIdentifier);
        $apiKey = $this->getApiKey($apiKeyIdentifier);

        if ($apiKey === null) {
            return null;
        }

        if ($prefix === null) {
            $keyWithPrefix = $apiKey;
        } else {
            $keyWithPrefix = $prefix . ' ' . $apiKey;
        }

        return $keyWithPrefix;
    }
}

class ConfigurationConstant
{
    /** @var string */
    public string $authUrl;
    /** @var string */
    public string $tokenUrl;
    /** @var string */
    public string $satusehatUrl;
    /** @var string */
    public string $baseUrl;
    /** @var string|null */
    public ?string $clientId;
    /** @var string|null */
    public ?string $clientSecret;
    /** @var string|null */
    public ?string $bearerToken;
    /** @var string|null */
    public ?string $timezone;

    public function __construct(string $authUrl, string $tokenUrl, string $satusehatUrl, string $baseUrl, ?string $clientId = null, ?string $clientSecret = null, ?string $bearerToken = null, $timezone = null)
    {
        if ($authUrl) {
            $this->authUrl = $authUrl;
        }
        if ($tokenUrl) {
            $this->tokenUrl = $tokenUrl;
        }
        if ($satusehatUrl) {
            $this->satusehatUrl = $satusehatUrl;
        }
        if ($baseUrl) {
            $this->baseUrl = $baseUrl;
        }
        if ($clientId) {
            $this->clientId = $clientId;
        }
        if ($clientSecret) {
            $this->clientSecret = $clientSecret;
        }
        if ($bearerToken) {
            $this->bearerToken = $bearerToken;
        }
        if ($timezone) {
            $this->timezone = $timezone;
        }
    }

    public static function create($constant): ConfigurationConstant
    {
        return new ConfigurationConstant($constant['authUrl'], $constant['tokenUrl'], $constant['satusehatUrl'], $constant['baseUrl'], $constant['clientId'], $constant['clientSecret'], $constant['bearerToken'], $constant['timezone']);
    }
}
